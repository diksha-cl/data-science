# -*- coding: utf-8 -*-
"""5_Overfitting Underfitting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B3jS05bg1lHrLvHXduKmABQhSOdBlDkG

# Polynomial Regression -Overfitting

What if your data is actually more complex than a simple straight line? Surprisingly,
you can actually use a linear model to fit nonlinear data. A simple way to do this is to
add powers of each feature as new features, then train a linear model on this extended
set of features. This technique is called Polynomial Regression
"""

# Some useful Imports

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import numpy.random as rnd
import matplotlib.pyplot as plt
# %matplotlib inline
np.random.seed(42)
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression

"""$y = 2 + X + 0.5 * X^2 + noise$"""

m = 100
X = 6 * np.random.rand(m, 1) - 3
y = 0.5 * X**2 + X + 2 + np.random.randn(m, 1)*0.4

X_new=np.linspace(-3, 3, 100).reshape(100, 1)

plt.plot(X, y, "b.", linewidth=3)

# plt.legend(loc="upper left")
plt.xlabel("$x$", fontsize=18)
plt.ylabel("$y$", rotation=0, fontsize=18)
plt.axis([-3, 3, 0, 10])
plt.show()

"""$y = \beta_{0} + \beta_{1}*X$"""

# from sklearn.preprocessing import StandardScaler
# from sklearn.pipeline import Pipeline

# plt.figure(figsize=(12,9))
style, width, degree = ("r-+", 2, 1)
polybig_features = PolynomialFeatures(degree=degree, include_bias=False)
# std_scaler = StandardScaler()
lin_reg = LinearRegression()
#   polynomial_regression = Pipeline([
#            ("poly_features", polybig_features),
#            ("std_scaler", std_scaler),
#            ("lin_reg", lin_reg),
#        ])
X_poly = polybig_features.fit_transform(X)
lin_reg.fit(X_poly, y)
X_new_poly = polybig_features.transform(X_new)
yhat_new = lin_reg.predict(X_new_poly)
plt.plot(X_new, yhat_new, style, label=str(degree), linewidth=width)

plt.plot(X, y, "b.", linewidth=3)

# plt.legend(loc="upper left")
plt.xlabel("$x$", fontsize=18)
plt.ylabel("$y$", rotation=0, fontsize=18)
plt.axis([-3, 3, 0, 10])
plt.show()

"""$y = \beta_{0} + \beta_{1}*X + \beta_{2}* X^2$"""

# from sklearn.preprocessing import StandardScaler
# from sklearn.pipeline import Pipeline

# plt.figure(figsize=(12,9))
style, width, degree = ("c--", 2, 3)
polybig_features = PolynomialFeatures(degree=degree, include_bias=False)
# std_scaler = StandardScaler()
lin_reg = LinearRegression()
#   polynomial_regression = Pipeline([
#            ("poly_features", polybig_features),
#            ("std_scaler", std_scaler),
#            ("lin_reg", lin_reg),
#        ])
X_poly = polybig_features.fit_transform(X)
lin_reg.fit(X_poly, y)
X_new_poly = polybig_features.transform(X_new)
yhat_new = lin_reg.predict(X_new_poly)
plt.plot(X_new, yhat_new, style, label=str(degree), linewidth=width)

plt.plot(X, y, "b.", linewidth=3)

# plt.legend(loc="upper left")
plt.xlabel("$x$", fontsize=18)
plt.ylabel("$y$", rotation=0, fontsize=18)
plt.axis([-3, 3, 0, 10])
plt.show()

"""$y = \beta_{0} + \beta_{1}*X + \beta_{2}* X^2 + ... + \beta_{300}* X^{300}$"""

from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline

# plt.figure(figsize=(12,9))
# for style, width, degree in (("g-", 1, 300), ("b--", 2, 3), ("r-+", 2, 1)):
style, width, degree = ("g-", 1, 300)

polybig_features = PolynomialFeatures(degree=degree, include_bias=False)
std_scaler = StandardScaler()
lin_reg = LinearRegression()
polynomial_regression = Pipeline([
    ("poly_features", polybig_features),
    ("std_scaler", std_scaler),
    ("lin_reg", lin_reg),
])
polynomial_regression.fit(X, y)
y_newbig = polynomial_regression.predict(X_new)
plt.plot(X_new, y_newbig, style, label=str(degree), linewidth=width)

plt.plot(X, y, "b.", linewidth=3)

plt.legend(loc="upper left")
plt.xlabel("$x$", fontsize=18)
plt.ylabel("$y$", rotation=0, fontsize=18)
plt.axis([-3, 3, 0, 10])
plt.show()









