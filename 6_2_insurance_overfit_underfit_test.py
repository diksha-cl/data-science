# -*- coding: utf-8 -*-
"""6.2_Insurance_Overfit_Underfit_Test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-HJ-P9gtKabwLev5mhS67wTrmjq2_ac5
"""

# Load the dataset into pandas dataframe and print the sample of first 5 rows

import pandas as pd
import numpy as np

df = pd.read_csv('https://raw.githubusercontent.com/diksha-cl/data-science/master/insurance_data.csv')

# We create a new feature which is the product of the smoker and obesity features.
df['smokOb'] = df['smoker'] * df['obese']

# Create the pandas dataframe with the features and the pandas series with the target.

X = df[['age', 'bmi', 'children', 'smoker', 'obese', 'sex', 'smokOb']]
y = df['charges']

# Do the train/test split.

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)

from sklearn import linear_model

# Let's create an instance for the LinerRegression model
lr = linear_model.LinearRegression()

# Train the model on our train dataset
lr.fit(X_train, y_train)

# Compute the error metrics on the training set.
y_train_hat = lr.predict(X_train)

#Regression Evaluation Metrics
from sklearn import metrics

print('MAE:', metrics.mean_absolute_error(y_train, y_train_hat))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_train, y_train_hat)))
print('R-squared:', metrics.r2_score(y_train, y_train_hat))

# Compute error metrics on the test set.
y_test_hat = lr.predict(X_test)

print('MAE:', metrics.mean_absolute_error(y_test, y_test_hat))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_test_hat)))
print('R-squared:', metrics.r2_score(y_test, y_test_hat))

