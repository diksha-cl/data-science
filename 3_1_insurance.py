# -*- coding: utf-8 -*-
"""3.1 Insurance.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NtdhPzWxf9zye0illW0cFabI9wWm24MI
"""

# Load the dataset into pandas dataframe and print the sample of first 5 rows

import pandas as pd
import numpy as np

df = pd.read_csv('https://raw.githubusercontent.com/diksha-cl/data-science/master/insurance_data.csv')

# Commented out IPython magic to ensure Python compatibility.
# Lets see how the charges vary with the age.
# %matplotlib inline
df.plot(x='age', y='charges', style='o')

# Find the group characteristics, where the groups are defined as:
# group 0: charges < 11000, 
# group 1: charges >= 11000 and charges < 30000, 
# group 2: charges >= 30000

df['group'] = np.where(df.charges < 15000, 0, np.where(30000 <= df.charges, 2, 1))
df.groupby('group').agg(np.mean)

c1 = int(df[(df.smoker == 0) & (df.obese == 0)]['charges'].mean())
c2 = int(df[(df.smoker == 0) & (df.obese == 1)]['charges'].mean())
c3 = int(df[(df.smoker == 1) & (df.obese == 0)]['charges'].mean())
c4 = int(df[(df.smoker == 1) & (df.obese == 1)]['charges'].mean())
print(c1, c2, c3, c4)

# We create a new feature which is the product of the smoker and obesity features.

df['smokOb'] = df['smoker'] * df['obese']
print("Number of customers who are both obese and smoke:", df[df.smokOb == 1].shape[0])
print("Total number of customers", df.shape[0])

# Create the pandas dataframe with the features and the pandas series with the target.

X = df[['age', 'bmi', 'children', 'smoker', 'obese', 'sex', 'smokOb']]
y = df['charges']

from sklearn import linear_model

# Let's create an instance for the LinerRegression model
lr = linear_model.LinearRegression()

# Train the model on our train dataset
lr.fit(X, y)

# Print the coefficients of the trained model.
coeffs = pd.DataFrame(lr.coef_, X.columns, columns=['Coefficient'])
coeffs

# Getting predictions from the model for the given examples.
predictions = lr.predict(X)

# Compare with the actual charges.
Scores = pd.DataFrame({'Actual': y})
column = pd.DataFrame({'Predictions': predictions})
Scores = Scores.join(column.set_index(Scores.index))
Scores.head()

# Lets evaluate the model for its accuracy using various metrics such as RMSE, 
# and especially R-squared.
from sklearn import metrics
import numpy as np

print('MAE:', metrics.mean_absolute_error(y, predictions))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y, predictions)))
print('Average Cost:', y.mean())
print('R-squared' , metrics.r2_score(y, predictions))

